# boolean.plain
create timeseries root.g1.boolean.plain.uncompressed with datatype=BOOLEAN,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.boolean.plain.snappy with datatype=BOOLEAN,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.boolean.plain.lz4 with datatype=BOOLEAN,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.boolean.plain.gzip with datatype=BOOLEAN,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.boolean.plain.zstd with datatype=BOOLEAN,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.boolean.plain.lzma2 with datatype=BOOLEAN,encoding=PLAIN,compressor=LZMA2;

# boolean.RLE
create timeseries root.g1.boolean.rle.uncompressed with datatype=BOOLEAN,encoding=RLE,compressor=UNCOMPRESSED;
create timeseries root.g1.boolean.rle.snappy with datatype=BOOLEAN,encoding=RLE,compressor=SNAPPY;
create timeseries root.g1.boolean.rle.lz4 with datatype=BOOLEAN,encoding=RLE,compressor=LZ4;
create timeseries root.g1.boolean.rle.gzip with datatype=BOOLEAN,encoding=RLE,compressor=GZIP;
create timeseries root.g1.boolean.rle.zstd with datatype=BOOLEAN,encoding=RLE,compressor=ZSTD;
create timeseries root.g1.boolean.rle.lzma2 with datatype=BOOLEAN,encoding=RLE,compressor=LZMA2;

# int32.plain
create timeseries root.g1.int32.plain.uncompressed with datatype=INT32,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.plain.snappy with datatype=INT32,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.int32.plain.lz4 with datatype=INT32,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.int32.plain.gzip with datatype=INT32,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.int32.plain.zstd with datatype=INT32,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.int32.plain.lzma2 with datatype=INT32,encoding=PLAIN,compressor=LZMA2;

# int32.rle
create timeseries root.g1.int32.rle.uncompressed with datatype=INT32,encoding=RLE,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.rle.snappy with datatype=INT32,encoding=RLE,compressor=SNAPPY;
create timeseries root.g1.int32.rle.lz4 with datatype=INT32,encoding=RLE,compressor=LZ4;
create timeseries root.g1.int32.rle.gzip with datatype=INT32,encoding=RLE,compressor=GZIP;
create timeseries root.g1.int32.rle.zstd with datatype=INT32,encoding=RLE,compressor=ZSTD;
create timeseries root.g1.int32.rle.lzma2 with datatype=INT32,encoding=RLE,compressor=LZMA2;

# int32.ts2diff
create timeseries root.g1.int32.ts2diff.uncompressed with datatype=INT32,encoding=TS_2DIFF,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.ts2diff.snappy with datatype=INT32,encoding=TS_2DIFF,compressor=SNAPPY;
create timeseries root.g1.int32.ts2diff.lz4 with datatype=INT32,encoding=TS_2DIFF,compressor=LZ4;
create timeseries root.g1.int32.ts2diff.gzip with datatype=INT32,encoding=TS_2DIFF,compressor=GZIP;
create timeseries root.g1.int32.ts2diff.zstd with datatype=INT32,encoding=TS_2DIFF,compressor=ZSTD;
create timeseries root.g1.int32.ts2diff.lzma2 with datatype=INT32,encoding=TS_2DIFF,compressor=LZMA2;

# int32.gorilla
create timeseries root.g1.int32.gorilla.uncompressed with datatype=INT32,encoding=GORILLA,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.gorilla.snappy with datatype=INT32,encoding=GORILLA,compressor=SNAPPY;
create timeseries root.g1.int32.gorilla.lz4 with datatype=INT32,encoding=GORILLA,compressor=LZ4;
create timeseries root.g1.int32.gorilla.gzip with datatype=INT32,encoding=GORILLA,compressor=GZIP;
create timeseries root.g1.int32.gorilla.zstd with datatype=INT32,encoding=GORILLA,compressor=ZSTD;
create timeseries root.g1.int32.gorilla.lzma2 with datatype=INT32,encoding=GORILLA,compressor=LZMA2;

# int32.freq
create timeseries root.g1.int32.freq.uncompressed with datatype=INT32,encoding=FREQ,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.freq.snappy with datatype=INT32,encoding=FREQ,compressor=SNAPPY;
create timeseries root.g1.int32.freq.lz4 with datatype=INT32,encoding=FREQ,compressor=LZ4;
create timeseries root.g1.int32.freq.gzip with datatype=INT32,encoding=FREQ,compressor=GZIP;
create timeseries root.g1.int32.freq.zstd with datatype=INT32,encoding=FREQ,compressor=ZSTD;
create timeseries root.g1.int32.freq.lzma2 with datatype=INT32,encoding=FREQ,compressor=LZMA2;

# int32.zigzag
create timeseries root.g1.int32.zigzag.uncompressed with datatype=INT32,encoding=ZIGZAG,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.zigzag.snappy with datatype=INT32,encoding=ZIGZAG,compressor=SNAPPY;
create timeseries root.g1.int32.zigzag.lz4 with datatype=INT32,encoding=ZIGZAG,compressor=LZ4;
create timeseries root.g1.int32.zigzag.gzip with datatype=INT32,encoding=ZIGZAG,compressor=GZIP;
create timeseries root.g1.int32.zigzag.zstd with datatype=INT32,encoding=ZIGZAG,compressor=ZSTD;
create timeseries root.g1.int32.zigzag.lzma2 with datatype=INT32,encoding=ZIGZAG,compressor=LZMA2;

# int32.chimp
create timeseries root.g1.int32.chimp.uncompressed with datatype=INT32,encoding=CHIMP,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.chimp.snappy with datatype=INT32,encoding=CHIMP,compressor=SNAPPY;
create timeseries root.g1.int32.chimp.lz4 with datatype=INT32,encoding=CHIMP,compressor=LZ4;
create timeseries root.g1.int32.chimp.gzip with datatype=INT32,encoding=CHIMP,compressor=GZIP;
create timeseries root.g1.int32.chimp.zstd with datatype=INT32,encoding=CHIMP,compressor=ZSTD;
create timeseries root.g1.int32.chimp.lzma2 with datatype=INT32,encoding=CHIMP,compressor=LZMA2;

# int32.sprintz
create timeseries root.g1.int32.sprintz.uncompressed with datatype=INT32,encoding=SPRINTZ,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.sprintz.snappy with datatype=INT32,encoding=SPRINTZ,compressor=SNAPPY;
create timeseries root.g1.int32.sprintz.lz4 with datatype=INT32,encoding=SPRINTZ,compressor=LZ4;
create timeseries root.g1.int32.sprintz.gzip with datatype=INT32,encoding=SPRINTZ,compressor=GZIP;
create timeseries root.g1.int32.sprintz.zstd with datatype=INT32,encoding=SPRINTZ,compressor=ZSTD;
create timeseries root.g1.int32.sprintz.lzma2 with datatype=INT32,encoding=SPRINTZ,compressor=LZMA2;

# int32.rlbe
create timeseries root.g1.int32.rlbe.uncompressed with datatype=INT32,encoding=RLBE,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.rlbe.snappy with datatype=INT32,encoding=RLBE,compressor=SNAPPY;
create timeseries root.g1.int32.rlbe.lz4 with datatype=INT32,encoding=RLBE,compressor=LZ4;
create timeseries root.g1.int32.rlbe.gzip with datatype=INT32,encoding=RLBE,compressor=GZIP;
create timeseries root.g1.int32.rlbe.zstd with datatype=INT32,encoding=RLBE,compressor=ZSTD;
create timeseries root.g1.int32.rlbe.lzma2 with datatype=INT32,encoding=RLBE,compressor=LZMA2;

# int64.plain
create timeseries root.g1.int64.plain.uncompressed with datatype=INT64,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.plain.snappy with datatype=INT64,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.int64.plain.lz4 with datatype=INT64,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.int64.plain.gzip with datatype=INT64,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.int64.plain.zstd with datatype=INT64,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.int64.plain.lzma2 with datatype=INT64,encoding=PLAIN,compressor=LZMA2;

# int64.rle
create timeseries root.g1.int64.rle.uncompressed with datatype=INT64,encoding=RLE,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.rle.snappy with datatype=INT64,encoding=RLE,compressor=SNAPPY;
create timeseries root.g1.int64.rle.lz4 with datatype=INT64,encoding=RLE,compressor=LZ4;
create timeseries root.g1.int64.rle.gzip with datatype=INT64,encoding=RLE,compressor=GZIP;
create timeseries root.g1.int64.rle.zstd with datatype=INT64,encoding=RLE,compressor=ZSTD;
create timeseries root.g1.int64.rle.lzma2 with datatype=INT64,encoding=RLE,compressor=LZMA2;

# int64.ts2diff
create timeseries root.g1.int64.ts_2diff.uncompressed with datatype=INT64,encoding=TS_2DIFF,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.ts_2diff.snappy with datatype=INT64,encoding=TS_2DIFF,compressor=SNAPPY;
create timeseries root.g1.int64.ts_2diff.lz4 with datatype=INT64,encoding=TS_2DIFF,compressor=LZ4;
create timeseries root.g1.int64.ts_2diff.gzip with datatype=INT64,encoding=TS_2DIFF,compressor=GZIP;
create timeseries root.g1.int64.ts_2diff.zstd with datatype=INT64,encoding=TS_2DIFF,compressor=ZSTD;
create timeseries root.g1.int64.ts_2diff.lzma2 with datatype=INT64,encoding=TS_2DIFF,compressor=LZMA2;

# int64.gorilla
create timeseries root.g1.int64.gorilla.uncompressed with datatype=INT64,encoding=GORILLA,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.gorilla.snappy with datatype=INT64,encoding=GORILLA,compressor=SNAPPY;
create timeseries root.g1.int64.gorilla.lz4 with datatype=INT64,encoding=GORILLA,compressor=LZ4;
create timeseries root.g1.int64.gorilla.gzip with datatype=INT64,encoding=GORILLA,compressor=GZIP;
create timeseries root.g1.int64.gorilla.zstd with datatype=INT64,encoding=GORILLA,compressor=ZSTD;
create timeseries root.g1.int64.gorilla.lzma2 with datatype=INT64,encoding=GORILLA,compressor=LZMA2;

# int64.freq
create timeseries root.g1.int64.freq.uncompressed with datatype=INT64,encoding=FREQ,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.freq.snappy with datatype=INT64,encoding=FREQ,compressor=SNAPPY;
create timeseries root.g1.int64.freq.lz4 with datatype=INT64,encoding=FREQ,compressor=LZ4;
create timeseries root.g1.int64.freq.gzip with datatype=INT64,encoding=FREQ,compressor=GZIP;
create timeseries root.g1.int64.freq.zstd with datatype=INT64,encoding=FREQ,compressor=ZSTD;
create timeseries root.g1.int64.freq.lzma2 with datatype=INT64,encoding=FREQ,compressor=LZMA2;

# int64.zigzag
create timeseries root.g1.int64.zigzag.uncompressed with datatype=INT64,encoding=ZIGZAG,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.zigzag.snappy with datatype=INT64,encoding=ZIGZAG,compressor=SNAPPY;
create timeseries root.g1.int64.zigzag.lz4 with datatype=INT64,encoding=ZIGZAG,compressor=LZ4;
create timeseries root.g1.int64.zigzag.gzip with datatype=INT64,encoding=ZIGZAG,compressor=GZIP;
create timeseries root.g1.int64.zigzag.zstd with datatype=INT64,encoding=ZIGZAG,compressor=ZSTD;
create timeseries root.g1.int64.zigzag.lzma2 with datatype=INT64,encoding=ZIGZAG,compressor=LZMA2;

# int64.chimp
create timeseries root.g1.int64.chimp.uncompressed with datatype=INT64,encoding=CHIMP,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.chimp.snappy with datatype=INT64,encoding=CHIMP,compressor=SNAPPY;
create timeseries root.g1.int64.chimp.lz4 with datatype=INT64,encoding=CHIMP,compressor=LZ4;
create timeseries root.g1.int64.chimp.gzip with datatype=INT64,encoding=CHIMP,compressor=GZIP;
create timeseries root.g1.int64.chimp.zstd with datatype=INT64,encoding=CHIMP,compressor=ZSTD;
create timeseries root.g1.int64.chimp.lzma2 with datatype=INT64,encoding=CHIMP,compressor=LZMA2;

# int64.sprintz
create timeseries root.g1.int64.sprintz.uncompressed with datatype=INT64,encoding=SPRINTZ,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.sprintz.snappy with datatype=INT64,encoding=SPRINTZ,compressor=SNAPPY;
create timeseries root.g1.int64.sprintz.lz4 with datatype=INT64,encoding=SPRINTZ,compressor=LZ4;
create timeseries root.g1.int64.sprintz.gzip with datatype=INT64,encoding=SPRINTZ,compressor=GZIP;
create timeseries root.g1.int64.sprintz.zstd with datatype=INT64,encoding=SPRINTZ,compressor=ZSTD;
create timeseries root.g1.int64.sprintz.lzma2 with datatype=INT64,encoding=SPRINTZ,compressor=LZMA2;

# int64.rlbe
create timeseries root.g1.int64.rlbe.uncompressed with datatype=INT64,encoding=RLBE,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.rlbe.snappy with datatype=INT64,encoding=RLBE,compressor=SNAPPY;
create timeseries root.g1.int64.rlbe.lz4 with datatype=INT64,encoding=RLBE,compressor=LZ4;
create timeseries root.g1.int64.rlbe.gzip with datatype=INT64,encoding=RLBE,compressor=GZIP;
create timeseries root.g1.int64.rlbe.zstd with datatype=INT64,encoding=RLBE,compressor=ZSTD;
create timeseries root.g1.int64.rlbe.lzma2 with datatype=INT64,encoding=RLBE,compressor=LZMA2;

# float.plain
create timeseries root.g1.float.plain.uncompressed with datatype=FLOAT,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.float.plain.snappy with datatype=FLOAT,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.float.plain.lz4 with datatype=FLOAT,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.float.plain.gzip with datatype=FLOAT,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.float.plain.zstd with datatype=FLOAT,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.float.plain.lzma2 with datatype=FLOAT,encoding=PLAIN,compressor=LZMA2;

# float.rle
create timeseries root.g1.float.rle.uncompressed with datatype=FLOAT,encoding=RLE,compressor=UNCOMPRESSED;
create timeseries root.g1.float.rle.snappy with datatype=FLOAT,encoding=RLE,compressor=SNAPPY;
create timeseries root.g1.float.rle.lz4 with datatype=FLOAT,encoding=RLE,compressor=LZ4;
create timeseries root.g1.float.rle.gzip with datatype=FLOAT,encoding=RLE,compressor=GZIP;
create timeseries root.g1.float.rle.zstd with datatype=FLOAT,encoding=RLE,compressor=ZSTD;
create timeseries root.g1.float.rle.lzma2 with datatype=FLOAT,encoding=RLE,compressor=LZMA2;

# float.ts2diff
create timeseries root.g1.float.ts_2diff.uncompressed with datatype=FLOAT,encoding=TS_2DIFF,compressor=UNCOMPRESSED;
create timeseries root.g1.float.ts_2diff.snappy with datatype=FLOAT,encoding=TS_2DIFF,compressor=SNAPPY;
create timeseries root.g1.float.ts_2diff.lz4 with datatype=FLOAT,encoding=TS_2DIFF,compressor=LZ4;
create timeseries root.g1.float.ts_2diff.gzip with datatype=FLOAT,encoding=TS_2DIFF,compressor=GZIP;
create timeseries root.g1.float.ts_2diff.zstd with datatype=FLOAT,encoding=TS_2DIFF,compressor=ZSTD;
create timeseries root.g1.float.ts_2diff.lzma2 with datatype=FLOAT,encoding=TS_2DIFF,compressor=LZMA2;

# float.gorilla
create timeseries root.g1.float.gorilla.uncompressed with datatype=FLOAT,encoding=GORILLA,compressor=UNCOMPRESSED;
create timeseries root.g1.float.gorilla.snappy with datatype=FLOAT,encoding=GORILLA,compressor=SNAPPY;
create timeseries root.g1.float.gorilla.lz4 with datatype=FLOAT,encoding=GORILLA,compressor=LZ4;
create timeseries root.g1.float.gorilla.gzip with datatype=FLOAT,encoding=GORILLA,compressor=GZIP;
create timeseries root.g1.float.gorilla.zstd with datatype=FLOAT,encoding=GORILLA,compressor=ZSTD;
create timeseries root.g1.float.gorilla.lzma2 with datatype=FLOAT,encoding=GORILLA,compressor=LZMA2;

# float.freq
create timeseries root.g1.float.freq.uncompressed with datatype=FLOAT,encoding=FREQ,compressor=UNCOMPRESSED;
create timeseries root.g1.float.freq.snappy with datatype=FLOAT,encoding=FREQ,compressor=SNAPPY;
create timeseries root.g1.float.freq.lz4 with datatype=FLOAT,encoding=FREQ,compressor=LZ4;
create timeseries root.g1.float.freq.gzip with datatype=FLOAT,encoding=FREQ,compressor=GZIP;
create timeseries root.g1.float.freq.zstd with datatype=FLOAT,encoding=FREQ,compressor=ZSTD;
create timeseries root.g1.float.freq.lzma2 with datatype=FLOAT,encoding=FREQ,compressor=LZMA2;

# float.chimp
create timeseries root.g1.float.chimp.uncompressed with datatype=FLOAT,encoding=CHIMP,compressor=UNCOMPRESSED;
create timeseries root.g1.float.chimp.snappy with datatype=FLOAT,encoding=CHIMP,compressor=SNAPPY;
create timeseries root.g1.float.chimp.lz4 with datatype=FLOAT,encoding=CHIMP,compressor=LZ4;
create timeseries root.g1.float.chimp.gzip with datatype=FLOAT,encoding=CHIMP,compressor=GZIP;
create timeseries root.g1.float.chimp.zstd with datatype=FLOAT,encoding=CHIMP,compressor=ZSTD;
create timeseries root.g1.float.chimp.lzma2 with datatype=FLOAT,encoding=CHIMP,compressor=LZMA2;

# float.sprintz
create timeseries root.g1.float.sprintz.uncompressed with datatype=float,encoding=SPRINTZ,compressor=UNCOMPRESSED;
create timeseries root.g1.float.sprintz.snappy with datatype=float,encoding=SPRINTZ,compressor=SNAPPY;
create timeseries root.g1.float.sprintz.lz4 with datatype=float,encoding=SPRINTZ,compressor=LZ4;
create timeseries root.g1.float.sprintz.gzip with datatype=float,encoding=SPRINTZ,compressor=GZIP;
create timeseries root.g1.float.sprintz.zstd with datatype=float,encoding=SPRINTZ,compressor=ZSTD;
create timeseries root.g1.float.sprintz.lzma2 with datatype=float,encoding=SPRINTZ,compressor=LZMA2;

# float.rlbe
create timeseries root.g1.float.rlbe.uncompressed with datatype=float,encoding=RLBE,compressor=UNCOMPRESSED;
create timeseries root.g1.float.rlbe.snappy with datatype=float,encoding=RLBE,compressor=SNAPPY;
create timeseries root.g1.float.rlbe.lz4 with datatype=float,encoding=RLBE,compressor=LZ4;
create timeseries root.g1.float.rlbe.gzip with datatype=float,encoding=RLBE,compressor=GZIP;
create timeseries root.g1.float.rlbe.zstd with datatype=float,encoding=RLBE,compressor=ZSTD;
create timeseries root.g1.float.rlbe.lzma2 with datatype=float,encoding=RLBE,compressor=LZMA2;

# double.plain
create timeseries root.g1.double.plain.uncompressed with datatype=DOUBLE,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.double.plain.snappy with datatype=DOUBLE,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.double.plain.lz4 with datatype=DOUBLE,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.double.plain.gzip with datatype=DOUBLE,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.double.plain.zstd with datatype=DOUBLE,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.double.plain.lzma2 with datatype=DOUBLE,encoding=PLAIN,compressor=LZMA2;

# double.rle
create timeseries root.g1.double.rle.uncompressed with datatype=DOUBLE,encoding=RLE,compressor=UNCOMPRESSED;
create timeseries root.g1.double.rle.snappy with datatype=DOUBLE,encoding=RLE,compressor=SNAPPY;
create timeseries root.g1.double.rle.lz4 with datatype=DOUBLE,encoding=RLE,compressor=LZ4;
create timeseries root.g1.double.rle.gzip with datatype=DOUBLE,encoding=RLE,compressor=GZIP;
create timeseries root.g1.double.rle.zstd with datatype=DOUBLE,encoding=RLE,compressor=ZSTD;
create timeseries root.g1.double.rle.lzma2 with datatype=DOUBLE,encoding=RLE,compressor=LZMA2;

# double.ts2diff
create timeseries root.g1.double.ts_2diff.uncompressed with datatype=DOUBLE,encoding=TS_2DIFF,compressor=UNCOMPRESSED;
create timeseries root.g1.double.ts_2diff.snappy with datatype=DOUBLE,encoding=TS_2DIFF,compressor=SNAPPY;
create timeseries root.g1.double.ts_2diff.lz4 with datatype=DOUBLE,encoding=TS_2DIFF,compressor=LZ4;
create timeseries root.g1.double.ts_2diff.gzip with datatype=DOUBLE,encoding=TS_2DIFF,compressor=GZIP;
create timeseries root.g1.double.ts_2diff.zstd with datatype=DOUBLE,encoding=TS_2DIFF,compressor=ZSTD;
create timeseries root.g1.double.ts_2diff.lzma2 with datatype=DOUBLE,encoding=TS_2DIFF,compressor=LZMA2;

# double.gorilla
create timeseries root.g1.double.gorilla.uncompressed with datatype=DOUBLE,encoding=GORILLA,compressor=UNCOMPRESSED;
create timeseries root.g1.double.gorilla.snappy with datatype=DOUBLE,encoding=GORILLA,compressor=SNAPPY;
create timeseries root.g1.double.gorilla.lz4 with datatype=DOUBLE,encoding=GORILLA,compressor=LZ4;
create timeseries root.g1.double.gorilla.gzip with datatype=DOUBLE,encoding=GORILLA,compressor=GZIP;
create timeseries root.g1.double.gorilla.zstd with datatype=DOUBLE,encoding=GORILLA,compressor=ZSTD;
create timeseries root.g1.double.gorilla.lzma2 with datatype=DOUBLE,encoding=GORILLA,compressor=LZMA2;

# double.freq
create timeseries root.g1.double.freq.uncompressed with datatype=DOUBLE,encoding=FREQ,compressor=UNCOMPRESSED;
create timeseries root.g1.double.freq.snappy with datatype=DOUBLE,encoding=FREQ,compressor=SNAPPY;
create timeseries root.g1.double.freq.lz4 with datatype=DOUBLE,encoding=FREQ,compressor=LZ4;
create timeseries root.g1.double.freq.gzip with datatype=DOUBLE,encoding=FREQ,compressor=GZIP;
create timeseries root.g1.double.freq.zstd with datatype=DOUBLE,encoding=FREQ,compressor=ZSTD;
create timeseries root.g1.double.freq.lzma2 with datatype=DOUBLE,encoding=FREQ,compressor=LZMA2;

# double.chimp
create timeseries root.g1.double.chimp.uncompressed with datatype=DOUBLE,encoding=CHIMP,compressor=UNCOMPRESSED;
create timeseries root.g1.double.chimp.snappy with datatype=DOUBLE,encoding=CHIMP,compressor=SNAPPY;
create timeseries root.g1.double.chimp.lz4 with datatype=DOUBLE,encoding=CHIMP,compressor=LZ4;
create timeseries root.g1.double.chimp.gzip with datatype=DOUBLE,encoding=CHIMP,compressor=GZIP;
create timeseries root.g1.double.chimp.zstd with datatype=DOUBLE,encoding=CHIMP,compressor=ZSTD;
create timeseries root.g1.double.chimp.lzma2 with datatype=DOUBLE,encoding=CHIMP,compressor=LZMA2;

# double.sprintz
create timeseries root.g1.double.sprintz.uncompressed with datatype=DOUBLE,encoding=SPRINTZ,compressor=UNCOMPRESSED;
create timeseries root.g1.double.sprintz.snappy with datatype=DOUBLE,encoding=SPRINTZ,compressor=SNAPPY;
create timeseries root.g1.double.sprintz.lz4 with datatype=DOUBLE,encoding=SPRINTZ,compressor=LZ4;
create timeseries root.g1.double.sprintz.gzip with datatype=DOUBLE,encoding=SPRINTZ,compressor=GZIP;
create timeseries root.g1.double.sprintz.zstd with datatype=DOUBLE,encoding=SPRINTZ,compressor=ZSTD;
create timeseries root.g1.double.sprintz.lzma2 with datatype=DOUBLE,encoding=SPRINTZ,compressor=LZMA2;

# double.rlbe
create timeseries root.g1.double.rlbe.uncompressed with datatype=DOUBLE,encoding=RLBE,compressor=UNCOMPRESSED;
create timeseries root.g1.double.rlbe.snappy with datatype=DOUBLE,encoding=RLBE,compressor=SNAPPY;
create timeseries root.g1.double.rlbe.lz4 with datatype=DOUBLE,encoding=RLBE,compressor=LZ4;
create timeseries root.g1.double.rlbe.gzip with datatype=DOUBLE,encoding=RLBE,compressor=GZIP;
create timeseries root.g1.double.rlbe.zstd with datatype=DOUBLE,encoding=RLBE,compressor=ZSTD;
create timeseries root.g1.double.rlbe.lzma2 with datatype=DOUBLE,encoding=RLBE,compressor=LZMA2;

# text.plain
create timeseries root.g1.text.plain.uncompressed with datatype=TEXT,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.text.plain.snappy with datatype=TEXT,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.text.plain.lz4 with datatype=TEXT,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.text.plain.gzip with datatype=TEXT,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.text.plain.zstd with datatype=TEXT,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.text.plain.lzma2 with datatype=TEXT,encoding=PLAIN,compressor=LZMA2;

# text.dictionary
create timeseries root.g1.text.dictionary.uncompressed with datatype=TEXT,encoding=DICTIONARY,compressor=UNCOMPRESSED;
create timeseries root.g1.text.dictionary.snappy with datatype=TEXT,encoding=DICTIONARY,compressor=SNAPPY;
create timeseries root.g1.text.dictionary.lz4 with datatype=TEXT,encoding=DICTIONARY,compressor=LZ4;
create timeseries root.g1.text.dictionary.gzip with datatype=TEXT,encoding=DICTIONARY,compressor=GZIP;
create timeseries root.g1.text.dictionary.zstd with datatype=TEXT,encoding=DICTIONARY,compressor=ZSTD;
create timeseries root.g1.text.dictionary.lzma2 with datatype=TEXT,encoding=DICTIONARY,compressor=LZMA2;
